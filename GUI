import sys
from PyQt5.QtWidgets import QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout, QLabel, QLineEdit, QPushButton, QComboBox, QTableWidget, QTableWidgetItem, QMessageBox, QDialog


class AddProductDialog(QDialog):
    def __init__(self, category_counters, parent=None):
        super().__init__(parent)
        self.setWindowTitle("Add Product")
        self.setGeometry(200, 200, 300, 200)

        self.category_counters = category_counters
        self.init_ui()

    def init_ui(self):
        layout = QVBoxLayout()

        category_label = QLabel("Category:")
        self.category_combo = QComboBox()
        self.category_combo.addItems(["Category 1", "Category 2"])

        name_label = QLabel("Name:")
        self.name_input = QLineEdit()

        color_label = QLabel("Color:")
        self.color_input = QLineEdit()

        quantity_label = QLabel("Quantity:")
        self.quantity_input = QLineEdit()

        add_button = QPushButton("Add")
        add_button.clicked.connect(self.add_product)

        layout.addWidget(category_label)
        layout.addWidget(self.category_combo)
        layout.addWidget(name_label)
        layout.addWidget(self.name_input)
        layout.addWidget(color_label)
        layout.addWidget(self.color_input)
        layout.addWidget(quantity_label)
        layout.addWidget(self.quantity_input)
        layout.addWidget(add_button)

        self.setLayout(layout)

    def add_product(self):
        category = self.category_combo.currentText()
        name = self.name_input.text()
        color = self.color_input.text()
        quantity = self.quantity_input.text()

        if not name:
            self.show_message_box("Error", "Please enter a product name.")
            return

        counter = self.category_counters[category]
        if category == "Category 1":
            key = f"S{counter}"
        elif category == "Category 2":
            key = f"R{counter}"

        self.category_counters[category] += 1

        self.accept()
        self.parent().add_product_to_table(key, category, name, color, quantity)

    def show_message_box(self, title, message):
        msg_box = QMessageBox()
        msg_box.setWindowTitle(title)
        msg_box.setText(message)
        msg_box.setIcon(QMessageBox.Information)
        msg_box.exec_()


class MarbleWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Marble Products")
        self.setGeometry(100, 100, 600, 400)

        self.category_counters = {"Category 1": 1, "Category 2": 1}
        self.init_ui()

    def init_ui(self):
        self.central_widget = QWidget()
        self.setCentralWidget(self.central_widget)

        # Create table widget
        self.table_widget = QTableWidget()
        self.table_widget.setColumnCount(5)
        self.table_widget.setHorizontalHeaderLabels(["ID", "Category", "Name", "Color", "Quantity"])

        # Create labels and input fields for searching and filtering products
        self.category_label = QLabel("Category:")
        self.category_combo = QComboBox()
        self.category_combo.addItems(["All", "Category 1", "Category 2"])

        self.name_label = QLabel("Name:")
        self.name_input = QLineEdit()

        self.color_label = QLabel("Color:")
        self.color_input = QLineEdit()

        self.quantity_label = QLabel("Quantity:")
        self.quantity_input = QLineEdit()

        # Create buttons
        self.add_button = QPushButton("Add")
        self.delete_button = QPushButton("Delete")
        self.modify_button = QPushButton("Modify")
        self.search_button = QPushButton("Search")
        self.filter_button = QPushButton("Filter")

        # Create layout
        main_layout = QVBoxLayout()
        self.central_widget.setLayout(main_layout)

        input_layout = QHBoxLayout()
        input_layout.addWidget(self.category_label)
        input_layout.addWidget(self.category_combo)
        input_layout.addWidget(self.name_label)
        input_layout.addWidget(self.name_input)
        input_layout.addWidget(self.color_label)
        input_layout.addWidget(self.color_input)
        input_layout.addWidget(self.quantity_label)
        input_layout.addWidget(self.quantity_input)

        button_layout = QHBoxLayout()
        button_layout.addWidget(self.add_button)
        button_layout.addWidget(self.delete_button)
        button_layout.addWidget(self.modify_button)
        button_layout.addWidget(self.search_button)
        button_layout.addWidget(self.filter_button)

        main_layout.addWidget(self.table_widget)
        main_layout.addLayout(input_layout)
        main_layout.addLayout(button_layout)

        # Connect buttons to their respective functions
        self.add_button.clicked.connect(self.show_add_product_dialog)
        self.delete_button.clicked.connect(self.delete_product)
        self.modify_button.clicked.connect(self.modify_product)
        self.search_button.clicked.connect(self.search_product)
        self.filter_button.clicked.connect(self.filter_table)

    def show_add_product_dialog(self):
        dialog = AddProductDialog(self.category_counters, self)
        if dialog.exec_() == QDialog.Accepted:
            pass

    def add_product_to_table(self, key, category, name, color, quantity):
        row_count = self.table_widget.rowCount()
        self.table_widget.setRowCount(row_count + 1)

        self.table_widget.setItem(row_count, 0, QTableWidgetItem(key))
        self.table_widget.setItem(row_count, 1, QTableWidgetItem(category))
        self.table_widget.setItem(row_count, 2, QTableWidgetItem(name))
        self.table_widget.setItem(row_count, 3, QTableWidgetItem(color))
        self.table_widget.setItem(row_count, 4, QTableWidgetItem(quantity))

    def delete_product(self):
        selected_rows = self.table_widget.selectionModel().selectedRows()
        if selected_rows:
            result = self.show_confirmation_box("Confirmation", "Are you sure you want to delete the selected product(s)?")
            if result:
                for row in reversed(selected_rows):
                    self.table_widget.removeRow(row.row())

    def modify_product(self):
        selected_row = self.table_widget.currentRow()
        if selected_row != -1:
            key_item = self.table_widget.item(selected_row, 0)
            category = self.category_combo.currentText()
            name = self.name_input.text()
            color = self.color_input.text()
            quantity = self.quantity_input.text()

            if not name:
                self.show_message_box("Error", "Please enter a product name.")
                return

            key = key_item.text()
            self.table_widget.setItem(selected_row, 1, QTableWidgetItem(category))
            self.table_widget.setItem(selected_row, 2, QTableWidgetItem(name))
            self.table_widget.setItem(selected_row, 3, QTableWidgetItem(color))
            self.table_widget.setItem(selected_row, 4, QTableWidgetItem(quantity))

            self.clear_input_fields()

    def search_product(self):
        search_text = self.name_input.text()
        rows = self.table_widget.rowCount()

        for row in range(rows):
            item = self.table_widget.item(row, 2)
            if item.text() == search_text:
                self.table_widget.setCurrentCell(row, 2)
                break

    def filter_table(self):
        category = self.category_combo.currentText()
        name = self.name_input.text()
        color = self.color_input.text()
        quantity = self.quantity_input.text()

        rows = self.table_widget.rowCount()

        for row in range(rows):
            category_item = self.table_widget.item(row, 1)
            name_item = self.table_widget.item(row, 2)
            color_item = self.table_widget.item(row, 3)
            quantity_item = self.table_widget.item(row, 4)

            if (category == "All" or category == category_item.text()) and \
                    (name == "" or name == name_item.text()) and \
                    (color == "" or color == color_item.text()) and \
                    (quantity == "" or quantity == quantity_item.text()):
                self.table_widget.showRow(row)
            else:
                self.table_widget.hideRow(row)

    def show_message_box(self, title, message):
        msg_box = QMessageBox()
        msg_box.setWindowTitle(title)
        msg_box.setText(message)
        msg_box.setIcon(QMessageBox.Information)
        msg_box.exec_()

    def show_confirmation_box(self, title, message):
        msg_box = QMessageBox()
        msg_box.setWindowTitle(title)
        msg_box.setText(message)
        msg_box.setIcon(QMessageBox.Question)
        msg_box.setStandardButtons(QMessageBox.Yes | QMessageBox.No)
        return msg_box.exec_() == QMessageBox.Yes

    def clear_input_fields(self):
        self.category_combo.setCurrentIndex(0)
        self.name_input.clear()
        self.color_input.clear()
        self.quantity_input.clear()


if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = MarbleWindow()
    window.show()
    sys.exit(app.exec_())
